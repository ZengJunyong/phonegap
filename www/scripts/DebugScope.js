// Generated by CoffeeScript 1.6.3
angular.module('debug', []).directive('debugScope', function() {
  return function(scope, element) {
    var printScopeTree, printScopeValue;
    printScopeValue = function(scope) {
      var $parent, gap, p, v, _results;
      gap = [];
      $parent = scope.$parent;
      while ($parent) {
        $parent = $parent.$parent;
        gap.push('#');
      }
      gap = gap.join('');
      gap += '---------------';
      console.log(gap, '$id:', scope.$id);
      _results = [];
      for (p in scope) {
        v = scope[p];
        if (scope.hasOwnProperty(p) && p.indexOf('$') === -1 && p !== 'this' && p !== 'constructor') {
          if (!(v instanceof Function)) {
            _results.push(console.log(p, ':', v));
          } else {
            _results.push(console.log(p, ':', v));
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    printScopeTree = function(scope) {
      var $$childHead, $$nextSibling, s, scopes, _i, _len, _results;
      printScopeValue(scope);
      $$childHead = scope.$$childHead;
      scopes = [];
      if ($$childHead) {
        scopes.push($$childHead);
        $$nextSibling = $$childHead.$$nextSibling;
        while ($$nextSibling) {
          scopes.push($$nextSibling);
          $$nextSibling = $$nextSibling.$$nextSibling;
        }
      }
      _results = [];
      for (_i = 0, _len = scopes.length; _i < _len; _i++) {
        s = scopes[_i];
        _results.push(printScopeTree(s));
      }
      return _results;
    };
    return element.on('dblclick', function() {
      return printScopeTree(scope);
    });
  };
});
